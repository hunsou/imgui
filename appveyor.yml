#version: 1.0.{build}
configuration: Release
platform: Win32
#clone_folder: C:\Projects\Github\imgui
install:
  - git submodule update --init --recursive
build:
  project: ./examples/imgui_examples.sln
  #verbosity: minimal

environment:
  APPVEYOR_SSH_KEY: ssh-rsa

init:
  - sh: curl -sflL 'https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-ssh.sh' | bash -e -

after_build:
  ps: |
    function CalculateHash($file)
    {
        $newLine = "`r`n"
        $text = (Split-Path $file -Leaf) + $newLine
        $text += 'MD5' + $newLine
        $text += (Get-FileHash $file -Algorithm MD5).Hash + $newLine
        $text += 'SHA-1' + $newLine
        $text += (Get-FileHash $file -Algorithm SHA1).Hash + $newLine
        $text += 'SHA-256' + $newLine
        $text += (Get-FileHash $file -Algorithm SHA256).Hash + $newLine
        $text += 'SHA-512' + $newLine
        $text += (Get-FileHash $file -Algorithm SHA512).Hash
        return $text
    }
    $WorkingFolder = "$env:APPVEYOR_BUILD_FOLDER\bin"    
    #$ExeFileName = "Shadowsocks-$env:APPVEYOR_BUILD_VERSION-$env:CONFIGURATION.exe"
    #$ExeFile = "$WorkingFolder\$ExeFileName"
    #$ExeHashFile = "$Exefile.hash"    
    $ExeFileName1 = "example_win32_directx9.exe"
    $ExeFileOrg1 = "$env:APPVEYOR_BUILD_FOLDER\examples\example_win32_directx9\Release\example_win32_directx9.exe"
    $ExeFile1 = "$WorkingFolder\$ExeFileName1"
    $ExeHashFile1 = "$Exefile1.hash"
    $ExeFileName2 = "example_win32_directx10.exe"
    $ExeFileOrg2 = "$env:APPVEYOR_BUILD_FOLDER\examples\example_win32_directx10\Release\example_win32_directx10.exe"    
    $ExeFile2 = "$WorkingFolder\$ExeFileName2"
    $ExeHashFile2 = "$Exefile2.hash"
    $ExeFileName3 = "example_win32_directx11.exe"
    $ExeFileOrg3 = "$env:APPVEYOR_BUILD_FOLDER\examples\example_win32_directx11\Release\example_win32_directx11.exe"  
    $ExeFile3 = "$WorkingFolder\$ExeFileName3"
    $ExeHashFile3 = "$Exefile3.hash"
    $ExeFileName4 = "example_glfw_opengl2.exe"
    $ExeFileOrg4 = "$env:APPVEYOR_BUILD_FOLDER\examples\example_glfw_opengl2\Release\example_glfw_opengl2.exe"   
    $ExeFile4 = "$WorkingFolder\$ExeFileName4"
    $ExeHashFile4 = "$Exefile4.hash"
    $ExeFileName5 = "example_glfw_opengl3.exe"
    $ExeFileOrg5 = "$env:APPVEYOR_BUILD_FOLDER\examples\example_glfw_opengl3\Release\example_glfw_opengl3.exe"
    $ExeFile5 = "$WorkingFolder\$ExeFileName5"
    $ExeHashFile5 = "$Exefile5.hash"
    $ExeFileName6 = "mydll.dll"
    $ExeFileOrg6 = "$env:APPVEYOR_BUILD_FOLDER\dlls\mydll\Release\mydll.dll"
    $ExeFile6 = "$WorkingFolder\$ExeFileName6"
    $ExeHashFile6 = "$Exefile6.hash"
    New-Item $WorkingFolder -ItemType Directory -Force
    #Copy-Item $env:APPVEYOR_BUILD_FOLDER\shadowsocks-csharp\bin\$env:PLATFORM\$env:CONFIGURATION\Shadowsocks.exe $WorkingFolder\Shadowsocks.exe
    #Copy-Item $WorkingFolder\Shadowsocks.exe $ExeFile
    Copy-Item $ExeFileOrg1 $ExeFile1
    Copy-Item $ExeFileOrg2 $ExeFile2
    Copy-Item $ExeFileOrg3 $ExeFile3
    Copy-Item $ExeFileOrg4 $ExeFile4
    Copy-Item $ExeFileOrg5 $ExeFile5
    Copy-Item $ExeFileOrg6 $ExeFile6
    $SrcFiles = "$env:APPVEYOR_BUILD_FOLDER\src"
    Copy-Item -Path $SrcFiles -Destination $WorkingFolder -Recurse
    #CalculateHash -file $Exefile | Out-File -FilePath $ExeHashFile
    #Push-AppveyorArtifact $ExeFile
    #Push-AppveyorArtifact $ExeHashFile    
    CalculateHash -file $Exefile1 | Out-File -FilePath $ExeHashFile1
    Push-AppveyorArtifact $ExeFile1
    Push-AppveyorArtifact $ExeHashFile1
    CalculateHash -file $Exefile2 | Out-File -FilePath $ExeHashFile2
    Push-AppveyorArtifact $ExeFile2
    Push-AppveyorArtifact $ExeHashFile2
    CalculateHash -file $Exefile3 | Out-File -FilePath $ExeHashFile3
    Push-AppveyorArtifact $ExeFile3
    Push-AppveyorArtifact $ExeHashFile3
    CalculateHash -file $Exefile4 | Out-File -FilePath $ExeHashFile4
    Push-AppveyorArtifact $ExeFile4
    Push-AppveyorArtifact $ExeHashFile4
    CalculateHash -file $Exefile5 | Out-File -FilePath $ExeHashFile5
    Push-AppveyorArtifact $ExeFile5
    Push-AppveyorArtifact $ExeHashFile5
    CalculateHash -file $Exefile6 | Out-File -FilePath $ExeHashFile6
    Push-AppveyorArtifact $ExeFile6
    Push-AppveyorArtifact $ExeHashFile6
    # Create and deploy the release zip
    if ($env:configuration -eq 'Release')
    {
        #$ReleaseFile = "$WorkingFolder\Shadowsocks.exe"
        #$ReleaseFile = "$WorkingFolder\*.exe"
        $ReleaseFile = "$WorkingFolder\*"
        #$HashFile = "$ReleaseFile.hash"
        $HashFile = "$WorkingFolder\*.exe.hash"
        #$ZipFile = "$WorkingFolder\Shadowsocks-$env:APPVEYOR_BUILD_VERSION.zip"
        $ZipFile = "$WorkingFolder\nightly-$env:APPVEYOR_BUILD_VERSION.zip"
        $ZipHashFile = "$ZipFile.hash"
        # Calculate exe Hash and archieve both exe and hash to zip
        #CalculateHash -file $ReleaseFile | Out-File -FilePath $hashFile        
        7z a $ZipFile $ReleaseFile
        #7z a $ZipFile $HashFile
        Push-AppveyorArtifact $ZipFile
        # Calculate zip Hash
        CalculateHash -file $ZipFile | Out-File -FilePath $ZipHashFile
        Push-AppveyorArtifact $ZipHashFile        
    }

deploy:
- provider: GitHub
  auth_token:
    secure: jh3HUO1hV25i75MT9+1c4mBG2wE3X+RWfF+X/Qe6aqedRwHrTVN690kFmu4glHsu
  artifact: nightly-%APPVEYOR_BUILD_VERSION%.zip,nightly-%APPVEYOR_BUILD_VERSION%.zip.hash
  #artifact: /.*\.zip/
  #draft: true
  prerelease: true
  #force_update: true
  on:
    branch: master                # release from master branch only
    configuration: Release
    APPVEYOR_REPO_TAG: false       # deploy on tag push only
